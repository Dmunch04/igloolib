plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'me.munchii'
version = '1.4.0'

ext {
    libraryVersion = project.hasProperty('libraryVersion') ? project.libraryVersion : '1.20.2'
    supportedLibraryVersions = ['1.20.2']
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    //flatDir {
    //    dirs 'lib'
    //}
}

dependencies {
    implementation project(':nms')

    if (libraryVersion == '1.20.2') {
        implementation project(':v1_20_2')
    } else {
        throw new GradleException("Unsupported NMS library version: " + libraryVersion)
    }

    implementation 'org.jetbrains:annotations:24.0.0'
    // commons-io version 20030203.000550 does not have FileUtils.readFileToString
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    testImplementation fileTree(dir: '../lib', include: 'minecraft-server-1.20.2-R0.1-SNAPSHOT.jar')
    testImplementation "org.spigotmc:spigot-api:1.20.2-R0.1-SNAPSHOT"
    testImplementation "org.spigotmc:spigot:1.20.2-R0.1-SNAPSHOT"

    compileOnly "org.spigotmc:spigot-api:1.20.2-R0.1-SNAPSHOT"
    compileOnly "org.spigotmc:spigot:1.20.2-R0.1-SNAPSHOT"
    compileOnly "org.spigotmc:minecraft-server:1.20.2-R0.1-SNAPSHOT"
    //compileOnly fileTree(dir: 'lib', include: '*.jar')
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.withType(Jar).configureEach {
    archiveBaseName.set('igloolib')
    archiveVersion.set("${libraryVersion}-${version}")
}

// Configure the Shadow JAR
tasks.withType(com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar).configureEach {
    archiveClassifier.set('') // No classifier (this will replace the default "regular" JAR)
    archiveBaseName.set('igloolib')
    archiveVersion.set("${libraryVersion}-${version}")

    // Optionally: Exclude META-INF files from dependencies for a cleaner JAR.
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

artifacts {
    archives shadowJar // Add the Shadow JAR to the published artifacts
}

tasks.register('buildAllVersions') {
    group = 'build'
    description = 'Builds plugin JARs for all supported Minecraft/Spigot versions'

    doLast {
        supportedLibraryVersions.each { version ->
            println "Building for libraryVersion: $version"
            exec {
                //commandLine 'gradle', 'build', '-PlibraryVersion=' + version
                commandLine 'gradle', 'shadowJar', '-PlibraryVersion=' + version
            }
        }
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    repositories {
        maven {
            name = "reposiliteReleases"
            url = "https://mvn.munchii.me/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'me.munchii'
            artifactId = 'igloolib'
            version = '1.20.2-1.4'

            from components.java
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
